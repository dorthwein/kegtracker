	<div class="full sidebar">
		<div class="logo">
			<h3> 
			
			</h3>	
		</div>
		<input type="button" value="Excel" class='excelExport' data-role="none"/>		
		<button class=' jqxFilterToggle' data-role="none"> Filter Off </button>

		<div class="jqxGridColumnListBox">	</div>
	</div>
	<div class="full display">
		<div class="toolbar">	

		</div>
    	<div class="jqxGrid full display"></div>
	</div>

<script>
$(document).ready(function(){
/*
	$.ajax({
	  url: location.href + '.json', 
	  dataType: "TEXT",
	  type: "GET",
	}).done(function(data) {		

	    var t = new google.visualization.DataTable(data);
        var options = {'title':'How Much Pizza I Ate Last Night', 'allowHtml': true};

        var chart = new google.visualization.Table(document.getElementById('chart_div'));
        chart.draw(t, options);


	  // Define a category picker control for the Gender column
	var filters = [
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl1', 'Owner')),
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl2', 'Product')),
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl3', 'Size')),
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl4', 'Brewer')),	
		
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl5', 'Status')),
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl6', 'Location')),
		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl7', 'Location Network')),
//		new google.visualization.ControlWrapper(g_chart_api.CategoryFilter('categoryControl8', 'Location')),
	]

	  // Define a Pie chart
	  var pie = new google.visualization.ChartWrapper({
	    'chartType': 'PieChart',
	    'containerId': 'chart1',
	    'options': {
	      'width': 300,
	      'height': 300,
	      'legend': 'none',
	      'title': 'Donuts eaten per person',
	      'chartArea': {'left': 15, 'top': 15, 'right': 0, 'bottom': 0},
	      'pieSliceText': 'label'
	    },
	    // Instruct the piechart to use colums 0 (Name) and 3 (Donuts Eaten)
	    // from the 'data' DataTable.
	    'view': {'columns': [0, 3]}
	  });

//			 - Assigns a class name to the table header row (<tr> element).
//			 - Assigns a class name to the non-header rows (<tr> elements).
//			 - Assigns a class name to odd table rows (<tr> elements). Note: the alternatingRowStyle option must be set to true.
//			 - Assigns a class name to the selected table row (<tr> element).
//			 - Assigns a class name to the hovered table row (<tr> element).
//			 - Assigns a class name to all cells in the header row (<td> element).
//			 - Assigns a class name to all non-header table cells (<td> element).
//			 - Assigns a class name to the cells in the row number column (<td> element). Note: the showRowNumber option must be set to true.
	  // Define a table
		var tableChartCss = {
			headerRow: 'headerRow',
			tableRow: 'tableRow',
			oddTableRow: 'oddTableRow',
			selectedTableRow: 'selectedTableRow',
			hoverTableRow: 'hoverTableRow',
			headerCell: 'headerCell',
			tableCell: 'tableCell',
			rowNumberCell: 'rowNumberCell',	 
		} 
	  var table = new google.visualization.ChartWrapper({
	    'chartType': 'Table',
	    'containerId': 'table',
	    'options': {
	      'height': jqxGridFullWindowHeight(),
	      'cssClassNames': tableChartCss,
	    }
	  });

	  // Create a dashboard

	  new google.visualization.Dashboard(document.getElementById('content_dashboard')).
	      // Establish bindings, declaring the both the slider and the category
	      // picker will drive both charts.
	      bind(filters, [table]).
	      // Draw the entire dashboard.
	      draw(data);
	


	});


*/
/*      
	Datafields Mapping
      a: entity_description,
      b: product_entity_description,
      c: tag_value,
      d: asset_type_description,
      e: asset_status_description,
      f: product_description,
      g: location_description,
      h: location_network_description,
      i: _id,
      j: fill_time
      k: last_action_time.to_i,
      l: asset_cycle_fact_id,         
*/	
	var source =
	{
		datatype: "json",
		datafields: [
			{ name: 'a', type: 'string' },
			{ name: 'b', type: 'string' },
			{ name: 'c', type: 'string' },
			{ name: 'd', type: 'string' },
			{ name: 'e', type: 'string' },
			{ name: 'f', type: 'string' },
			{ name: 'g', type: 'string' },
			{ name: 'h', type: 'string' },
			{ name: 'i' },
			{ name: 'j', type: 'date' },
			{ name: 'k', type: 'date' },
			{ name: 'l'},
		],
		url: location.href,
		updaterow: function (rowid, rowdata, commit) {
			// synchronize with the server - send update command
			// call commit with parameter true if the synchronization with the server is successful 
			// and with parameter false if the synchronization failder.		
			commit(true);
		}		
	};
/*
	On grid load - get total # rows
*/


	window.dataAdapter = new $.jqx.dataAdapter(source, {
		beforeSend: function(jqXHR, settings){		
			 	
		},
		loadComplete: function (data) { 
			 
		},
		loadError: function (xhr, status, error) { }      
	});
//	window.dataAdapter = dataAdapter

 
	// Initialize Grid
	var gridSettings = settings.jqxGridProperties
	gridSettings['source'] = dataAdapter;
	gridSettings['columns'] = [
		{ text: 'Owner', datafield: 'a', filtertype: 'checkedlist' },			
		{ text: 'Product', datafield: 'f', filtertype: 'checkedlist' },			
		{ text: 'Size', datafield: 'd', filtertype: 'checkedlist' },
		{ text: 'Brewery', datafield: 'b', filtertype: 'checkedlist' },			
		{ text: 'Fill Date', datafield: 'j', filtertype: 'date', cellsformat: 'd'  },
		{ text: 'Tag Value', datafield: 'c' },
		{ text: 'Status', datafield: 'e', filtertype: 'checkedlist' },			
		{ text: 'Location', datafield: 'g', filtertype: 'checkedlist' },
		{ text: 'Location Network', datafield: 'h', filtertype: 'checkedlist' },
		{ text: 'Last Scene', datafield: 'k', filtertype: 'date', cellsformat: 'd'  },
		{ text: 'Cycle', datafield: 'l', columntype: 'button', filterable:false, width:'75px', cellsrenderer: function (row) {
			return 'Cycle'
		}, buttonclick: function (row) {
			var rowdata = $('.jqxGrid').jqxGrid('getrowdata', row);
			if(rowdata['l'] == ''){
				var url = system.server + "/popup_record_not_found"
			} else{
				var url = system.server + "/reports/asset_cycles/" + rowdata['l'];
			}
			openPopupWindow(url)
		}},	


		{ text: 'View', datafield: 'i', columntype: 'button', filterable:false, width:'75px', cellsrenderer: function (row) {
			return 'View'
		}, buttonclick: function (row) {
			var rowdata = $('.jqxGrid').jqxGrid('getrowdata', row);
			var url = location.href + "/" + rowdata['i'] + "/edit"						
			openPopupWindow(url)
		}},	
	]

	$(".jqxGrid").jqxGrid( gridSettings );	
	jqxIntialize()
	 					
});



</script>